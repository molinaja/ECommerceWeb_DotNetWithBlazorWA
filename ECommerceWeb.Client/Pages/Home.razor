@page "/"
@inject IJSRuntime JS
@inject HttpClient httpClient
@inject IProductProxy productProxy
@inject NavigationManager navigationManager
@inject SweetAlertService Swal
@inject IToastService toastService
@inject BlazorSpinner.LoadingService _loadingService


<BannerPrincipal />



@if (Products != null && Products.Count != 0)
{

    <section id="Products" class="my-5">
        <div class="container my-5 py-5">

            <div class="section-header d-md-flex justify-content-between align-items-center">
                @* <h2 class="display-3 fw-normal">Products</h2> *@
                @if (Categories != null && Categories.Count != 0)
                {
                    <div class="mb-4 mb-md-0">


                        <p class="m-0">


                        </p>

                    </div>

                    <div class="container my-3 py-5">

                        <div class="row my-5">
                            <div class="col text-center">
                                <button @onclick="() => FilterItems(categoryALL)"
                                    class="filter-button me-4  @(activeCategory == categoryALL ? "active" : "")">
                                    <iconify-icon class="category-icon" icon="ph:paw-print"></iconify-icon>
                                    ALL
                                </button>
                                @foreach (CategoryDtoResponse category in Categories)
                                {

                                    <button @onclick="() => FilterItems(category.Id.ToString())"
                                        class="filter-button me-4 @(activeCategory == category.Id.ToString() ? "active" : "")">
                                        <iconify-icon class="category-icon" icon="@category.Icon"></iconify-icon>
                                        @category.Name
                                    </button>

                                }
                            </div>

                        </div>

                    </div>

                }

            </div>

            <div class="row">
                <div class="col-4 mb-2">

                    <a href="#" class="btn btn-outline-dark btn-lg text-uppercase fs-6 rounded-1">
                        shop now
                        <svg width="24" height="24" viewBox="0 0 24 24" class="mb-1">
                            <use xlink:href="#arrow-right"></use>
                        </svg>
                    </a>

                </div>
            </div>

            <div class="row">
               <div class="col-4 mb-2">

                    <div class="widget-menu">
                        <div class="widget-search-bar">
                            <div class="search-bar border rounded-2 border-dark-subtle pe-3">
                                <div id="search-form" class="text-center d-flex align-items-center" action="" method="">

                                    <input @bind-value="Search" type="search" class="form-control border-0 bg-transparent" placeholder="Search for products" />
                                    <button @onclick="GetCatalogProducts" type="button" class="btn btn-outline-success"><i class="bi bi-search" aria-label="search"></i> </button>

                                </div>
                            </div>
                        </div>
                    </div>

               </div>
            </div>



            <div class="isotope-container row">

                @foreach (var item in Products)
                {

                    <div class="item @item.CategoryId col-md-4 col-lg-3 my-4">

                        <div class="card position-relative">

                            @if (string.IsNullOrEmpty(item.UrlImage))
                            {
                                <a href="detail/@item.Id"><img src="assets/images/noproductImage1.png"
                                    class="img-fluid rounded-4" alt="@item.Name"></a>
                            }
                            else
                            {
                                <a href="detail/@item.Id"><img src="@item.UrlImage" class="img-fluid rounded-4" alt="@item.Name"></a>
                            }

                            <div class="card-body p-0">

                                <a href="detail/@item.Id">
                                    <h3 class="card-title pt-4 m-0">@item.Name</h3>
                                </a>

                                <div class="card-text">

                                    <span class="rating secondary-font">
                                        <iconify-icon icon="clarity:star-solid" class="text-primary"></iconify-icon>
                                        <iconify-icon icon="clarity:star-solid" class="text-primary"></iconify-icon>
                                        <iconify-icon icon="clarity:star-solid" class="text-primary"></iconify-icon>
                                        <iconify-icon icon="clarity:star-solid" class="text-primary"></iconify-icon>
                                        <iconify-icon icon="clarity:star-solid" class="text-primary"></iconify-icon>
                                        5.0
                                    </span>

                                    <h3 class="secondary-font text-primary">$@item.Price</h3>

                                    <div class="d-flex flex-wrap mt-3">
                                        <a href="#" class="btn-cart me-3 px-4 pt-3 pb-3">
                                            <h5 class="text-uppercase m-0">Add to Cart</h5>
                                        </a>
                                        <a href="#" class="btn-wishlist px-4 pt-3 ">
                                            <iconify-icon icon="fluent:heart-28-filled" class="fs-5"></iconify-icon>
                                        </a>
                                    </div>

                                </div>

                            </div>

                        </div>

                    </div>

                }

            </div>

        </div>

    </section>

}

<Banner2 />

<Testimonial />

<BestSelling />

<RegisterHome />

<LastedBlog />

<Service />

<InstaSection />


@code {

    const string categoryALL = "ALL";
    private string activeCategory = "ALL";
    public ICollection<ProductDtoResponse> Products { get; set; } = default!;
    public ICollection<CategoryDtoResponse> Categories { get; set; } = default!;
    public int? CategorySelected { get; set; }
    public string Search { get; set; } = string.Empty;
    public bool IsLoading { get; set; }


    private async Task FilterItems(string filterValue)
    {

        await JS.InvokeVoidAsync("filterIsotope", "." + filterValue);
        activeCategory = filterValue;  

    }

    protected override async Task OnInitializedAsync()
    {
        _loadingService.Show();
        await GetCatalogProducts();
        await GetCatalogCategories();
        _loadingService.Hide();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeScripts");
        }
    }

    private async Task GetCatalogProducts()
    {
        Console.WriteLine("cargando prodductos");
        Console.WriteLine(Search);
        try
        {
            IsLoading = true;
            Products = await productProxy.ListAsync(Search);
        }
        catch (Exception e)
        {

            await Swal.FireAsync(
                    new SweetAlertOptions
                        {
                            Position = "top-end",
                            Icon = "warning",
                            Title = e.Message,
                            ShowConfirmButton = false,
                            Timer = 1500
                        });

        }
        finally
        {
            IsLoading = false;

        }
        Console.WriteLine(Products.Count.ToString());

    }

    private async Task GetCatalogCategories()
    {

        try
        {
            IsLoading = true;
            var res = await httpClient.GetFromJsonAsync<ICollection<CategoryDtoResponse>>("api/Categories");
            if (res != null)
            {
                Categories = res;
            }
        }
        catch (Exception e)
        {

            await Swal.FireAsync(
                   new SweetAlertOptions
                       {
                           Position = "top-end",
                           Icon = "errpr",
                           Title = e.Message,
                           ShowConfirmButton = false,
                           Timer = 1500
                       }
            );

        }
        finally
        {
            IsLoading = false;

        }

    }

    public async void changeActiveCategory(string next, string actual)
    {

        await JS.InvokeVoidAsync("changeTab", "nav-sign-in-tab", "nav-register-tab");
    }


}